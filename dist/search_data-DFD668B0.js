searchData={"content_type":"text/markdown","items":[{"doc":"The Channel module handles the communication between nodes in a network.\n\nIt provides functions to send and receive cells over a secure SSL socket, and other functions related to establishing and using a channel.\n\nAs of now, link protocols other than version 3 are not explicitly supported.\n\nYou can read more about Channels in the Tor spec: https://spec.torproject.org/tor-spec/channels.html","ref":"Channel.html","title":"Channel","type":"module"},{"doc":"Validates the TLS certificate of the given channel against the given signing certificate.\n\nThis function DOES NOT validate the certificate chain, it only checks if the subject matches.","ref":"Channel.html#check_tls_hash/2","title":"Channel.check_tls_hash/2","type":"function"},{"doc":"Converts a cell of a specific type into a binary cell and sends it over the given channel.\n\nThe cell is converted to a binary cell by the given cell module.\n\nFor example, to send a VERSIONS cell:\n\n    cell = Channel.Cells.Versions.new([1, 2, 3])\n    Channel.convert_and_send(channel, cell, Channel.Cells.Versions)","ref":"Channel.html#convert_and_send/3","title":"Channel.convert_and_send/3","type":"function"},{"doc":"Creates a new channel with the given TLS socket.","ref":"Channel.html#new/1","title":"Channel.new/1","type":"function"},{"doc":"Receives a cell and converts it to a struct using the given cell module.\n\nFor example, to receive a VERSIONS cell:\n\n    {:ok, versions_cell} = Channel.recv_and_convert(channel, Channel.Cells.Versions)","ref":"Channel.html#recv_and_convert/2","title":"Channel.recv_and_convert/2","type":"function"},{"doc":"Receives the next cell from the given channel in the order they were received.","ref":"Channel.html#recv_cell/1","title":"Channel.recv_cell/1","type":"function"},{"doc":"Sends the given cell over the given channel.","ref":"Channel.html#send_cell/2","title":"Channel.send_cell/2","type":"function"},{"doc":"A channel is a TLS connection to a Tor relay, the width of the cird_id is negotiated during the handshake.","ref":"Channel.html#t:t/0","title":"Channel.t/0","type":"type"},{"doc":"The Channel.BinaryCell module represents the basic unit of communication over a channel.\n\nEach cell consists of a circuit ID, a command, and a payload. The circuit ID identifies the circuit that the cell belongs to. The command indicates the type of the cell. The payload contains the actual data of the cell.\n\nCells can be variable or fixed length, it is up to the sender to parse the type of cell correctly. The function `variable_payload?/1` can be used to determine if a cell has a fixed or variable length payload.\nThe circ_id can be either 16 or 32 bits long, this depends on the negotiated link protocol version, and the sender must know which to use.\n\nSee https://spec.torproject.org/tor-spec/cell-packet-format.html for more details about the cell packet format in the Tor protocol.","ref":"Channel.BinaryCell.html","title":"Channel.BinaryCell","type":"module"},{"doc":"Creates a cell\n\nExamples:\n  iex> Channel.BinaryCell.new(1, 7, <<1::16,2::16,3::16>>)\n  %Channel.BinaryCell{\n    circ_id: 1,\n    command: 7,\n    payload: <<1::16,2::16,3::16>>\n  }\n  iex> Channel.BinaryCell.new(1, 1, <<1::16,2::16,3::16>>)\n  %Channel.BinaryCell{\n    circ_id: 1,\n    command: 1,\n    payload: <<1::16,2::16,3::16>>\n  }","ref":"Channel.BinaryCell.html#new/3","title":"Channel.BinaryCell.new/3","type":"function"},{"doc":"Determines if a cell has a variable length payload based on the command.\n\nExamples:\n  iex> Channel.BinaryCell.variable_payload?(7)\n  true\n  iex> Channel.BinaryCell.variable_payload?(128)\n  true\n  iex> Channel.BinaryCell.variable_payload?(127)\n  false","ref":"Channel.BinaryCell.html#variable_payload?/1","title":"Channel.BinaryCell.variable_payload?/1","type":"function"},{"doc":"Type for a cell.","ref":"Channel.BinaryCell.html#t:t/0","title":"Channel.BinaryCell.t/0","type":"type"},{"doc":"Defines behaviour for converting between binary cells and specific cell types. Cells are differentiated\nby their command code.\n\nTor provides a list of cell types with hyperlinks to the relevant sections of the Tor specification\nin section 2.3.2 \"Cells (messages and channels)\".","ref":"Channel.CellBehaviour.html","title":"Channel.CellBehaviour","type":"behaviour"},{"doc":"Convert a cell struct of the given type from a binary cell.\n\nIf the binary cell's payload does not follow the expected schema or is otherwise invalid, an error MUST be returned.","ref":"Channel.CellBehaviour.html#c:from_binary_cell/1","title":"Channel.CellBehaviour.from_binary_cell/1","type":"callback"},{"doc":"Construct a cell of the given type given a keyword list of options.","ref":"Channel.CellBehaviour.html#c:from_keywords/1","title":"Channel.CellBehaviour.from_keywords/1","type":"callback"},{"doc":"Convert a cell of the given type to a binary cell.","ref":"Channel.CellBehaviour.html#c:to_binary_cell/1","title":"Channel.CellBehaviour.to_binary_cell/1","type":"callback"},{"doc":"The Channel.Cells.Certs module represents the CERTS cell type in the Tor protocol.\n\nCurrently, only Ed25519 certs are properly parsed, all other cert types are returned as binaries.","ref":"Channel.Cells.Certs.html","title":"Channel.Cells.Certs","type":"module"},{"doc":"","ref":"Channel.Cells.Certs.html#from_binary_cell/1","title":"Channel.Cells.Certs.from_binary_cell/1","type":"function"},{"doc":"","ref":"Channel.Cells.Certs.html#from_keywords/1","title":"Channel.Cells.Certs.from_keywords/1","type":"function"},{"doc":"","ref":"Channel.Cells.Certs.html#to_binary_cell/1","title":"Channel.Cells.Certs.to_binary_cell/1","type":"function"},{"doc":"","ref":"Channel.Cells.Certs.html#t:t/0","title":"Channel.Cells.Certs.t/0","type":"type"},{"doc":"The Channel.Cells.Versions module represents the VERSIONS cell type in the Tor protocol.","ref":"Channel.Cells.Versions.html","title":"Channel.Cells.Versions","type":"module"},{"doc":"","ref":"Channel.Cells.Versions.html#from_binary_cell/1","title":"Channel.Cells.Versions.from_binary_cell/1","type":"function"},{"doc":"","ref":"Channel.Cells.Versions.html#from_keywords/1","title":"Channel.Cells.Versions.from_keywords/1","type":"function"},{"doc":"","ref":"Channel.Cells.Versions.html#to_binary_cell/1","title":"Channel.Cells.Versions.to_binary_cell/1","type":"function"},{"doc":"","ref":"Channel.Cells.Versions.html#t:t/0","title":"Channel.Cells.Versions.t/0","type":"type"}]}